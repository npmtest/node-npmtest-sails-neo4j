{"/home/travis/build/npmtest/node-npmtest-sails-neo4j/test.js":"/* istanbul instrument in package npmtest_sails_neo4j */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-neo4j/lib.npmtest_sails_neo4j.js":"/* istanbul instrument in package npmtest_sails_neo4j */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sails_neo4j = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sails_neo4j = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-neo4j/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sails-neo4j && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sails_neo4j */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sails_neo4j\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sails_neo4j.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sails_neo4j.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sails_neo4j.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sails_neo4j.__dirname + '/lib.npmtest_sails_neo4j.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-neo4j/node_modules/sails-neo4j/lib/adapter.js":"/*---------------------------------------------------------------\n  :: sails-neo4j\n  -> adapter\n---------------------------------------------------------------*/\n\nvar async = require('async'),\n    neo = require('./connection'),\n    security = require('./helpers/security'),\n    _ = require('lodash');\n\nvar adapter = module.exports = (function() {\n\n  // Set to true if this adapter supports (or requires) things like data types, validations, keys, etc.\n  // If true, the schema for models using this adapter will be automatically synced when the server starts.\n  // Not terribly relevant if not using a non-SQL / non-schema-ed data store\n  var connections = {};\n  var syncable = false,\n\n  // Including a commitLog config enables transactions in this adapter\n  // Please note that these are not ACID-compliant transactions:\n  // They guarantee *ISOLATION*, and use a configurable persistent store, so they are *DURABLE* in the face of server crashes.\n  // However there is no scheduled task that rebuild state from a mid-step commit log at server start, so they're not CONSISTENT yet.\n  // and there is still lots of work to do as far as making them ATOMIC (they're not undoable right now)\n  //\n  // However, for the immediate future, they do a great job of preventing race conditions, and are\n  // better than a naive solution.  They add the most value in findOrCreate() and createEach().\n  //\n  // commitLog: {\n  //  identity: '__default_mongo_transaction',\n  //  adapter: 'sails-mongo'\n  // },\n\n  // Default configuration for collections\n  // (same effect as if these properties were included at the top level of the model definitions)\n    defaults = {\n      // change these to fit your setup\n      protocol: 'http://',\n      port: 7474,\n      host: 'localhost',\n      base: '/db/data/',\n      debug: false\n\n      // If setting syncable, you should consider the migrate option,\n      // which allows you to set how the sync will be performed.\n      // It can be overridden globally in an app (config/adapters.js) and on a per-model basis.\n      //\n      // drop   => Drop schema and data, then recreate it\n      // alter  => Drop/add columns as necessary, but try\n      // safe   => Don't change anything (good for production DBs)\n      // migrate: 'alter'\n    };\n\n  //Init\n  //Merge the default connection with the connection from sails app (config/connections.js).\n  function createConnection(connection) {\n      connection = connection || {};\n      connectionSettings = {};\n      _.merge(connectionSettings, defaults, connection);\n      neo.connect(connectionSettings);\n      return neo;\n  }\n\n  //Stored the neo4j connection on connections array and then it can be retrieved by identity name (\"neo4j\")\n  function registerConnection(connection, collection, cb) {\n      if(!connection.identity) return cb(new Error('Connection is missing an identity.'));\n      if(connections[connection.identity]) return cb(new Error('Connection is already registered.'));\n      connections[connection.identity] =  createConnection(connection);\n      cb();\n  }\n\n  function parseOne(values) {\n    var i, names = [], name;\n    for (i in values) {\n      if (values.hasOwnProperty(i)) {\n        name = i + ': {' + i + '}';\n        names.push(name);\n      }\n    }\n    return names.join(',');\n  }\n\n  function parseMany(values) {\n    var i, names = [], name;\n    for (i in values) {\n      if (values.hasOwnProperty(i)) {\n        if (Object.prototype.toString.call(values[i]) === '[object Array]') {\n          name = i;\n        }\n        else {\n          return false;\n        }\n        names.push(name);\n      }\n    }\n    return names.join(',');\n  }\n\n  function andJoin(object, properties, andKeyword, namespace) {\n    var query = [], q;\n    for (var i in properties) {\n      if (properties.hasOwnProperty(i)) {\n        var equality = '=';\n        if (properties[i].hasOwnProperty('=~'))\n        {\n          properties[i] = '(?i)' + properties[i]['='];\n          equality = '=~';\n        }\n        var field = object + '.' + i;\n        if (i==='id')\n        {\n          field = 'id('+object+')';\n          properties[i] = parseInt(properties[i]);\n        }\n        completeName = (typeof namespace === 'undefined' || namespace === null) ? i : namespace + '_' + i;\n        q = field + equality + '{' + completeName + '}';\n        query.push(q);\n      }\n    }\n    return query.join(andKeyword);\n  }\n\n  function toWhere(object, params, namespace) {\n    properties = params.where;\n    if (!properties)\n      return '';\n    var query = [], q;\n    var count = 0;\n    for (var i in properties) {\n      count++;\n    }\n    if (count === 1 && properties.hasOwnProperty('or'))\n    {\n      var targetProperties = {};\n      for (var i in properties['or'])\n      {\n        q = '(' + andJoin(object, properties['or'][i], 'AND', namespace) + ')';\n        query.push(q);\n        _.extend(targetProperties,properties['or'][i]);\n      }\n      params.where = targetProperties;\n    }\n    else\n      query.push('(' + andJoin(object, properties, 'AND', namespace) + ')');\n\n    return '(' + query.join(' OR ') + ')';\n  }\n\n  function query(connection, collection, q, params, cb, unique) {\n    connections[connection].graph(function(gr) {\n      gr.query(q.join('\\n'), params, function (err, results) {\n        if (connectionSettings.debug) console.log(q.join('\\n'), results);\n        if (err) {\n          cb(err, null);\n        }\n        else {\n          // this breaks our stuff, commenting out for now until further discussion with woody\n          // for(i=0; i<results.length;i++)\n          // {\n          //   data = _.clone(results[i].data);\n          //   id = _.pick(results[i], 'id');\n          //   id.id = parseInt(id.id);\n          //   results[i] = _.extend(id, data);\n          // }\n          // if (unique) cb(null, results[0]);\n          // else\n          cb(null, results);\n        }\n      });\n    });\n  }\n\n  function getConnection() {\n    return neo.connect(defaults);\n  }\n\n  //return value of adapter function constructor\n\n  return {\n    syncable: syncable,\n    defaults: defaults,\n    getConnection: getConnection,\n    sanitized: security.sanitized,\n    query: query,\n    registerConnection: registerConnection,\n    createConnection: createConnection,\n\n    create: function(connection, collection, params, cb) {\n\n      var q, delimiter = '';\n\n      if (collection === null) { collection = ''; } // do we have a label?\n      else { collection = ':' + collection; }\n\n      if (params !== null && collection !== null) { delimiter = ' AND '; } // do we have a label and params?\n\n      q = [\n        'CREATE (n' + collection + ' { ' + parseOne(params) + ' })',\n        'RETURN n'\n      ];\n\n      query(connection, collection, q, params, cb, true);\n    },\n\n    createMany: function(connection, collection, params, cb) {\n\n      var q, delimiter = '';\n\n      if (collection === null) { collection = ''; } // do we have a label?\n      else { collection = ':' + collection; }\n\n      if (params && collection) { delimiter = ' AND '; } // do we have a label and params?\n\n      q = [\n        'CREATE (n' + collection + ' { ' + parseMany(params) + ' })',\n        'RETURN n'\n      ];\n\n      query(connection, collection, q, params, cb, false);\n    },\n\n    find: function(connection, collection, params, cb) {\n\n      var q, delimiter = '';\n\n      if (collection === null) { collection = ''; } // do we have a label?\n      else { collection = 'n:' + collection; }\n\n      if (params.where && collection) { delimiter = ' AND '; } // do we have a label and params?\n      q = [\n        'MATCH (n)',\n        'WHERE ' + collection + delimiter + toWhere('n', params),\n        'RETURN n'\n      ];\n\n      query(connection, collection, q, params.where, cb, false);\n    },\n\n    update: function(connection, collection, params, values, cb) {\n\n      var q, delimiter = '';\n\n      if (collection === null) { collection = ''; } // do we have a label?\n      else { collection = 'n:' + collection; }\n\n      if (params.where && collection) { delimiter = ' AND '; } // do we have a label and params?\n      q = [\n        'MATCH (n)',\n        'WHERE ' + collection + delimiter + toWhere('n', params),\n        'SET ' + andJoin('n', _.omit(values, 'id'), ','),\n        'RETURN n'\n      ];\n\n      params.where = _.extend(params.where, values);\n\n      query(connection, collection, q, params.where, cb, true);\n    },\n\n    destroy: function(connection, collection, params, cb) {\n      var q, delimiter = '';\n\n      if (collection === null) { collection = ''; } // do we have a label?\n      else { collection = 'n:' + collection; }\n\n      if (params.where && collection) { delimiter = ' AND '; } // do we have a label and params?\n      q = [\n        'MATCH (n)',\n        'WHERE ' + collection + delimiter + toWhere('n', params),\n        'DELETE n'\n      ];\n      query(connection, collection, q, params.where, cb, true);\n    },\n\n\n\n    // REQUIRED method if users expect to call Model.stream()\n    stream: function(connection, collection, options, stream) {\n      // options is a standard criteria/options object (like in find)\n\n      // stream.write() and stream.end() should be called.\n      // for an example, check out:\n      // https://github.com/balderdashy/sails-dirty/blob/master/DirtyAdapter.js#L247\n\n    },\n\n    link: function(connection, collection, predecessorParams, successorCollectionName, successorParams, relationshipType, relationshipParams, cb) {\n      var q, predecessorDelimiter = '', successorDelimiter = '', predecessorNamespace = 'pred', successorNamespace = 'succ';\n\n      if (collection === null) { collection = ''; } // do we have a label?\n      else { collection = 'a:' + collection; }\n      if (predecessorParams && collection) { predecessorDelimiter = ' AND '; }\n\n      if (successorCollectionName === null) { successorCollectionName = ''; } // do we have a label?\n      else { successorCollectionName = 'b:' + successorCollectionName; }\n      if (successorParams && collection) { successorDelimiter = ' AND '; }\n\n      relationshipParams = _.isEmpty(relationshipParams) ? '' : ' ' + JSON.stringify(relationshipParams);\n\n      q = [\n        'MATCH (a),(b)',\n        'WHERE ' + collection + predecessorDelimiter + toWhere('a', {where: predecessorParams}, predecessorNamespace)\n        +' AND ' + successorCollectionName + successorDelimiter + toWhere('b', {where: successorParams}, successorNamespace),\n        'CREATE (a)-[n:' + relationshipType + relationshipParams + ']->(b)',\n        'RETURN n'\n      ];\n\n      params = {};\n      _.each(predecessorParams, function(value, key) {\n        key = predecessorNamespace + '_' + key;\n        params[key] = value;\n      });\n      _.each(successorParams, function(value, key) {\n        key = successorNamespace + '_' + key;\n        params[key] = value;\n      });\n\n      query(connection, collection, q, params, cb, true);\n    }\n\n\n\n    /*\n    **********************************************\n    * Optional overrides\n    **********************************************\n\n    // Optional override of built-in batch create logic for increased efficiency\n    // otherwise, uses create()\n    createEach: function (collectionName, cb) { cb(); },\n\n    // Optional override of built-in findOrCreate logic for increased efficiency\n    // otherwise, uses find() and create()\n    findOrCreate: function (collectionName, cb) { cb(); },\n\n    // Optional override of built-in batch findOrCreate logic for increased efficiency\n    // otherwise, uses findOrCreate()\n    findOrCreateEach: function (collectionName, cb) { cb(); }\n    */\n\n\n    /*\n    **********************************************\n    * Custom methods\n    **********************************************\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // > NOTE:  There are a few gotchas here you should be aware of.\n    //\n    //    + The collectionName argument is always prepended as the first argument.\n    //      This is so you can know which model is requesting the adapter.\n    //\n    //    + All adapter functions are asynchronous, even the completely custom ones,\n    //      and they must always include a callback as the final argument.\n    //      The first argument of callbacks is always an error object.\n    //      For some core methods, Sails.js will add support for .done()/promise usage.\n    //\n    //    +\n    //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n    // Any other methods you include will be available on your models\n    foo: function (collectionName, cb) {\n      cb(null,\"ok\");\n    },\n    bar: function (collectionName, baz, watson, cb) {\n      cb(\"Failure!\");\n    }\n\n\n    // Example success usage:\n\n    Model.foo(function (err, result) {\n      if (err) console.error(err);\n      else console.log(result);\n\n      // outputs: ok\n    })\n\n    // Example error usage:\n\n    Model.bar(235, {test: 'yes'}, function (err, result){\n      if (err) console.error(err);\n      else console.log(result);\n\n      // outputs: Failure!\n    })\n\n    */\n  };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-sails-neo4j/node_modules/sails-neo4j/lib/connection.js":"var neo4j = require('neo4j-js'),\n    Q = require('q');\n\nmodule.exports = (function() {\n  var graph = false, d = Q.defer(); // if an active connection exists, use it instead of tearing the previous one down\n\n  function connect(connection) {\n    if (!graph) {\n      var path = connection.protocol + connection.host + ':' + connection.port + connection.base;\n      graph = true;\n      neo4j.connect(path, function(err, graph) {\n        if (err) {\n          console.log('An error has occured when trying to connect to Neo4j:');\n          d.reject(err);\n          throw err;\n        }\n        d.resolve(graph);\n      });\n    }\n    return d.promise;\n  }\n\n  function graphDo(cb) {\n    d.promise.then(cb);\n  }\n\n  // built in this pattern so this can be enhanced later on\n  return {\n    connect: connect,\n    graph: graphDo\n  };\n})();\n","/home/travis/build/npmtest/node-npmtest-sails-neo4j/node_modules/sails-neo4j/lib/helpers/security.js":"\nmodule.exports = (function () {\n    // A list of cypher related keywords, for sanitization\n\n    cypherKeywords = [\n        'match',\n        'merge',\n        'start',\n        'where',\n        'create',\n        'set',\n        'delete',\n        'remove',\n        'foreach',\n        'union',\n        'count',\n        'return'\n    ];\n\n    /**\n     * hasCypher() accepts a string, and sees if it contains any of the cypher keywords or special characters\n     * @param  {String}  str [A string, that comes from the params object passed into sanitized]\n     * @return {Boolean}     [True if it has cypher or special chars, false if it doesn't]\n     */\n    function hasCypher(str) {\n        return cypherKeywords.some(function(element, index, array) {\n            var o = str.indexOf(element);\n            if (o === -1) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    /**\n     * sanitized() accepts an object, traverses it, and checks if it contains cypher or special chars\n     * @param  {Object} params [An object which could have other objects inside of it]\n     * @return {Boolean} truth [True if the object is \"Sanitized\", false if it isn't]\n     */\n    function sanitized(connection, collection, params) {\n        var i, truth = true;\n        for (i in params) {\n            if (params.hasOwnProperty(i) && truth) {\n                if (typeof params[i] === 'object') {\n                    truth = sanitized(connection, collection, params[i]);\n                }\n                else {\n                    if(hasCypher(String(params[i]).toLowerCase())) {\n                        truth = false;\n                    }\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return truth;\n    }\n\n    return {\n        sanitized: sanitized\n    };\n\n})();\n"}